<?xml version="1.0" encoding="UTF-8"?>
<project name="codesparks-core" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:unless="ant:unless" xmlns:if="ant:if">

    <!-- Semantic Versioning, https://semver.org/ -->

    <property name="major" value="1"/>
    <property name="minor" value="0"/>
    <property name="patch" value="0"/>

    <property name="version" value="${major}.${minor}.${patch}"/>

    <!-- General Properties -->

    <property name="src.dir" value="src/main"/>
    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes/main"/>
    <property name="resources.dir" value="resources"/>

    <condition property="is-mac">
        <os family="mac"/>
    </condition>

    <condition property="is-windows">
        <os family="windows"/>
    </condition>

    <condition property="is-linux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <!-- Ivy -->

    <import file="ivy-init.xml"/>

    <target name="retrieve" depends="ivy-init" description="retrieve dependencies with ivy">
        <ivy:settings file="ivysettings.xml"/>
        <ivy:retrieve/> <!-- Includes resolve -->
    </target>

    <!-- Libs -->

    <property file="idea.properties"/>

    <!-- macOS is currently unsupported -->
    <property name="idea.version.mac" value="212.5284.40"/>
    <target name="intellij-path-mac" if="is-mac">
        <property name="jdk.home.intellij_idea"
                  value="/Applications/IntelliJ IDEA CE.app/Contents"/>
    </target>

    <target name="intellij-path-linux" if="is-linux">
        <property unless:set="jdk.home.intellij_idea.linux"
                  name="jdk.home.intellij_idea.linux"
                  value="/opt/idea-IC-${idea.version.linux}"/>
        <property name="jdk.home.intellij_idea" value="${jdk.home.intellij_idea.linux}"/>
    </target>

    <target name="intellij-path-windows" if="is-windows">
        <property unless:set="jdk.home.intellij_idea.windows"
                  name="jdk.home.intellij_idea.windows"
                  value="C:/Program Files/JetBrains/IntelliJ IDEA Community Edition ${idea.version.windows}"/>
        <property name="jdk.home.intellij_idea" value="${jdk.home.intellij_idea.windows}"/>
    </target>

    <target name="set-intellij-path" depends="intellij-path-linux, intellij-path-windows">
        <echo message="${jdk.home.intellij_idea}"/>
    </target>

    <target name="def-libs" depends="set-intellij-path, retrieve">
        <!--        <echo message="${jdk.home.intellij_idea}"/>-->
        <path id="libs">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset dir="${jdk.home.intellij_idea}/lib"
                     includes="**/*.jar"
                     excludes="kotlin-stdlib-jdk8.jar,
                                kotlin-reflect-*,
                                ant/lib/ant.jar,
                                3rd-party-rt.jar
            "/>
            <fileset dir="${jdk.home.intellij_idea}/plugins/java"
                     includes="**/*.jar"/> <!-- Although it compiles without these dependencies, it is required for, e.g. the class 'PsiClass' which is contained in the IntelliJ Plugin Development's internal 'Java Plugin'. So don't remove it!!! -->
        </path>
    </target>

    <!-- Cleanup -->

    <available file="${classes.dir}" type="dir" property="classes.dir.exists"/>

    <target name="clean-classes" if="classes.dir.exists">
        <delete includeemptydirs="true">
            <fileset dir="${classes.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <echo message="Cleaned class files"/>
    </target>

    <!-- Compilation -->

    <property environment="env"/>

    <target name="compile" depends="clean-classes, def-libs" unless="compilation-executed">
        <echo message="${jdk.home.intellij_idea}"/>
        <echo message="OS Name is:         ${os.name}"/>
        <echo message="OS Architecture is: ${os.arch}"/>
        <echo message="OS Version is:      ${os.version}"/>

        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true" includeantruntime="false">
            <classpath>
                <path refid="libs"/>
            </classpath>
            <compilerarg
                    line="-encoding UTF-8 -source 11 --system &quot;${env.JAVA_HOME}&quot; -target 11 -Xlint:-unchecked"/>
        </javac>
        <property name="compilation-executed" value="true"/>
    </target>

    <!-- Jar -->

    <property name="codesparks-core.jar" value="codesparks-core-${version}.jar"/>
    <property name="codesparks-java.jar" value="codesparks-java-${version}.jar"/>
    <property name="codesparks-python.jar" value="codesparks-python-${version}.jar"/>
    <property name="codesparks-core-sources.jar" value="codesparks-core-${version}-sources.jar"/>
    <property name="codesparks-java-sources.jar" value="codesparks-java-${version}-sources.jar"/>
    <property name="codesparks-python-sources.jar" value="codesparks-python-${version}-sources.jar"/>

    <property name="base.package.path" value="de/unitrier/st/codesparks"/>

    <property name="codesparks-core.package.path" value="${base.package.path}/core"/>
    <property name="codesparks-java.package.path" value="${base.package.path}/java"/>
    <property name="codesparks-python.package.path" value="${base.package.path}/python"/>

    <target name="jar-codesparks-core">
        <delete file="${codesparks-core.jar}"/>
        <jar basedir="${classes.dir}"
             destfile="${codesparks-core.jar}"
             includes="${codesparks-core.package.path}/**/*"
        >
            <zipgroupfileset dir="${lib.dir}"
                             includes=""
                             excludes="**/*javadoc.jar,**/*sources.jar"/>
            <fileset dir="${resources.dir}"
                     includes="codesparks-strings.properties,
                               icons/codesparks.png,
                               icons/codesparks_not_visible_20x14.png,
                               icons/codesparks_visible_20x13.png,
                               svg/codesparks.svg,
                               svg/codesparks_not_visible.svg,
                               svg/codesparks_visible.svg
                     "/>
            <metainf dir="${basedir}"
                     includes="LICENSE.txt,
                               NOTICE.txt
            "/>
        </jar>
        <delete file="${codesparks-core-sources.jar}"/>
        <jar basedir="${src.dir}"
             destfile="${codesparks-core-sources.jar}"
             includes="${codesparks-core.package.path}/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>
    </target>

    <target name="jar-codesparks-java">
        <delete file="${codesparks-java.jar}"/>
        <jar basedir="${classes.dir}"
             destfile="${codesparks-java.jar}"
             includes="${codesparks-java.package.path}/**/*"
        >
            <fileset dir="${resources.dir}"
                     includes="
            "/>
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
            "/>
        </jar>
        <delete file="${codesparks-java-sources.jar}"/>
        <jar basedir="${src.dir}"
             destfile="${codesparks-java-sources.jar}"
             includes="${codesparks-java.package.path}/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>
    </target>

    <target name="jar-codesparks-python">
        <delete file="${codesparks-python.jar}"/>
        <jar basedir="${classes.dir}"
             destfile="${codesparks-python.jar}"
             includes="${codesparks-python.package.path}/**/*"
        >
            <fileset dir="${resources.dir}"
                     includes="
            "/>
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
            "/>
        </jar>
        <delete file="${codesparks-python-sources.jar}"/>
        <jar basedir="${src.dir}"
             destfile="${codesparks-python-sources.jar}"
             includes="${codesparks-python.package.path}/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>
    </target>

    <target name="jar" depends="compile, jar-codesparks-core, jar-codesparks-java, jar-codesparks-python, doc"/>

    <!-- Tests -->

    <property name="test.src.dir" value="src/test"/>
    <property name="test.classes.dir" value="${build.dir}/classes/test"/>

    <available file="${test.classes.dir}" type="dir" property="test.classes.dir.exists"/>

    <target name="clean-test-classes" if="test.classes.dir.exists">
        <delete includeemptydirs="true">
            <fileset dir="${test.classes.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <echo message="Cleaned test class files"/>
    </target>

    <!-- Used in the run-tests task of the build file from codesparks-jpt -->
    <target name="compile-tests-only" depends="clean-test-classes, def-libs">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeantruntime="false">
            <classpath>
                <path refid="libs"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-tests" depends="clean-test-classes, compile">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeantruntime="false">
            <classpath>
                <path refid="libs"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="run-tests-only" depends="def-libs">
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="libs"/>
                <pathelement location="${test.classes.dir}"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <batchtest fork="yes">
                <fileset dir="${test.classes.dir}">
                    <include name="de/unitrier/st/codesparks/core/**/*Test*.class"/>
                    <!-- -->
                    <exclude name="de/unitrier/st/codesparks/core/**/ThreadClusterSilhouetteTest$1.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="run-tests" depends="compile-tests">
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="libs"/>
                <pathelement location="${test.classes.dir}"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <batchtest fork="yes">
                <fileset dir="${test.classes.dir}">
                    <include name="de/unitrier/st/codesparks/core/**/*Test*.class"/>
                    <!-- -->
                    <exclude name="de/unitrier/st/codesparks/core/**/ThreadClusterSilhouetteTest$1.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Java Docs -->

    <property name="core-doc.dir" value="core-doc"/>
    <property name="java-doc.dir" value="java-doc"/>
    <property name="python-doc.dir" value="python-doc"/>

    <available file="${core-doc.dir}" type="dir" property="core-doc.dir.exists"/>
    <available file="${java-doc.dir}" type="dir" property="java-doc.dir.exists"/>
    <available file="${python-doc.dir}" type="dir" property="python-doc.dir.exists"/>

    <property name="codesparks-core-javadoc.jar" value="codesparks-core-${version}-javadoc.jar"/>
    <property name="codesparks-java-javadoc.jar" value="codesparks-java-${version}-javadoc.jar"/>
    <property name="codesparks-python-javadoc.jar" value="codesparks-python-${version}-javadoc.jar"/>

    <target name="doc" depends="" description="Generate Java docs">
        <!-- Core -->
        <delete includeemptydirs="true" if:set="core-doc.dir.exists">
            <fileset dir="${core-doc.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <mkdir dir="${core-doc.dir}"/>
        <javadoc encoding="UTF-8"
                 verbose="false"
                 packagenames="de.unitrier.st.codesparks.core.*"
                 sourcepath="${src.dir}"
                 classpath="${classes.dir}"
                 destdir="${core-doc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="The CodeSparks Framework - Core Javadoc"
                 additionalparam="-Xdoclint:none"
        >
            <classpath>
                <path refid="libs"/>
            </classpath>
        </javadoc>

        <jar basedir="${core-doc.dir}"
             destfile="${codesparks-core-javadoc.jar}"
             includes="/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>

        <delete dir="${core-doc.dir}"/>

        <!-- Java -->
        <delete includeemptydirs="true" if:set="java-doc.dir.exists">
            <fileset dir="${java-doc.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <mkdir dir="${java-doc.dir}"/>
        <javadoc encoding="UTF-8"
                 verbose="false"
                 packagenames="de.unitrier.st.codesparks.java.*"
                 sourcepath="${src.dir}"
                 classpath="${classes.dir}"
                 destdir="${java-doc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="The CodeSparks Framework - Java Javadoc"
                 additionalparam="-Xdoclint:none"
        >
            <classpath>
                <path refid="libs"/>
            </classpath>
        </javadoc>

        <jar basedir="${java-doc.dir}"
             destfile="${codesparks-java-javadoc.jar}"
             includes="/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>

        <delete dir="${java-doc.dir}"/>

        <!-- Python -->
        <delete includeemptydirs="true" if:set="python-doc.dir.exists">
            <fileset dir="${python-doc.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <mkdir dir="${python-doc.dir}"/>
        <javadoc encoding="UTF-8"
                 verbose="false"
                 packagenames="de.unitrier.st.codesparks.python.*"
                 sourcepath="${src.dir}"
                 classpath="${classes.dir}"
                 destdir="${python-doc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="The CodeSparks Framework - Python Javadoc"
                 additionalparam="-Xdoclint:none"
        >
            <classpath>
                <path refid="libs"/>
            </classpath>
        </javadoc>

        <jar basedir="${python-doc.dir}"
             destfile="${codesparks-python-javadoc.jar}"
             includes="/**/*">
            <metainf dir="${basedir}"
                     includes="LICENSE.txt
                    "/>
        </jar>

        <delete dir="${python-doc.dir}"/>

    </target>

</project>

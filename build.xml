<?xml version="1.0" encoding="UTF-8"?>
<project name="codesparks-core" basedir="." default="retrieve" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- General Properties -->

    <property name="src.dir" value="src/main"/>
    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>
    <property name="classes.dir" value="${build.dir}/classes/main"/>
    <property name="resources.dir" value="resources"/>

    <condition property="is-windows">
        <os family="windows"/>
    </condition>

    <condition property="is-linux">
        <os family="unix"/>
    </condition>

    <!-- Ivy -->

    <property name="ivy.install.version" value="2.5.0"/>
    <property name="ivy.jar.dir" value="${user.home}/.ivy2"/>
    <property name="ivy.jar.file" value="ivy-${ivy.install.version}.jar"/>
    <property name="ivy.jar.path" value="${ivy.jar.dir}/${ivy.jar.file}"/>

    <target name="ivy-installed">
        <available file="${ivy.jar.path}" property="ivy.installed"/>
    </target>

    <target name="ivy-download" unless="ivy.installed">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.path}" usetimestamp="true"/>
    </target>

    <target name="ivy-init" depends="ivy-download">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="${ivy.jar.file}"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="retrieve" depends="ivy-init" description="retrieve dependencies with ivy">
        <ivy:retrieve/> <!-- Includes resolve -->
    </target>

    <!-- Libs -->

    <property name="idea.version.windows" value="2021.1"/>
    <property name="idea.version.linux" value="203.7717.56"/>
    <!--    <property name="jdk.home.intellij_idea" value=""/>-->

    <target name="intellij-path-linux" if="is-linux">
        <property name="jdk.home.intellij_idea"
                  value="/opt/idea-IC-${idea.version.linux}"/>
    </target>

    <target name="intellij-path-windows" if="is-windows">
        <property name="jdk.home.intellij_idea"
                  value="C:/Program Files/JetBrains/IntelliJ IDEA Community Edition ${idea.version.windows}"/>
    </target>

    <target name="def-libs" depends="intellij-path-linux, intellij-path-windows, retrieve">
        <!--        <echo message="${jdk.home.intellij_idea}"/>-->
        <path id="libs">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset dir="${jdk.home.intellij_idea}/lib" includes="**/*.jar"
                     excludes="kotlin-stdlib-jdk8.jar,ant/lib/ant.jar"/>
            <fileset dir="${jdk.home.intellij_idea}/plugins/java"
                     includes="**/*.jar"/> <!-- Although it compiles without these dependencies, it is required for, e.g. the class 'PsiClass' which is contained in the IntelliJ Plugin Development's internal 'Java Plugin'. So don't remove it!!! -->
        </path>
    </target>

    <!-- Cleanup -->

    <available file="${classes.dir}" type="dir" property="classes.dir.exists"/>

    <target name="clean-classes" if="classes.dir.exists">
        <delete includeemptydirs="true">
            <fileset dir="${classes.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <echo message="Cleaned class files"/>
    </target>

    <!-- Compilation -->

    <target name="compile" depends="clean-classes, def-libs, kotlin-init" unless="compilation-executed">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true" includeantruntime="false">
            <classpath>
                <path refid="libs"/>
            </classpath>
            <compilerarg line="-encoding UTF-8 -source 11 -target 11 -Xlint:unchecked"/>
            <withKotlin/>
        </javac>
        <property name="compilation-executed" value="true"/>
    </target>

    <property name="codesparks-core.jar" value="codesparks-core.jar"/>

    <target name="jar" depends="compile">
        <delete file="${codesparks-core.jar}"/>
        <jar basedir="${classes.dir}"
             destfile="${codesparks-core.jar}"
        >
            <fileset dir="${resources.dir}"/>
        </jar>
    </target>

    <!-- Kotlin -->

    <property name="kotlin-compiler.version" value="1.4.32"/>
    <property name="kotlin-compiler.file" value="${lib.dir}/kotlin-compiler-${kotlin-compiler.version}.zip"/>

    <target name="kotlin-compiler-available">
        <available file="${kotlin-compiler.file}" property="kotlin-compiler.available"/>
    </target>

    <target name="kotlin-download" depends="kotlin-compiler-available" unless="kotlin-compiler.available">
        <get
                src="https://github.com/JetBrains/kotlin/releases/download/v${kotlin-compiler.version}/kotlin-compiler-${kotlin-compiler.version}.zip"
                dest="${kotlin-compiler.file}" usetimestamp="true"/>
    </target>

    <target name="kotlin-init" depends="kotlin-download">
        <property name="kotlin-ant.jar" value="kotlin-ant.jar"/>
        <unzip src="${kotlin-compiler.file}" dest="${lib.dir}" overwrite="false">
            <patternset>
                <include name="kotlinc/lib/*.jar"/>
            </patternset>
        </unzip>
        <property name="kotlin.lib" value="${lib.dir}/kotlinc/lib/${kotlin-ant.jar}"/>
        <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}"/>
    </target>

    <!-- Tests -->

    <property name="test.src.dir" value="src/test"/>
    <property name="test.classes.dir" value="${build.dir}/classes/test"/>

    <available file="${test.classes.dir}" type="dir" property="test.classes.dir.exists"/>

    <target name="clean-test-classes" if="test.classes.dir.exists">
        <delete includeemptydirs="true">
            <fileset dir="${test.classes.dir}" includes="**/*" excludes="*.*"/>
        </delete>
        <echo message="Cleaned test class files"/>
    </target>

    <!--
    <path id="test-sources">
        <pathelement location="${test.src.dir}"/>
        <pathelement location="${src.dir}"/>
    </path>
    -->

    <target name="compile-tests" depends="clean-test-classes, compile">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeantruntime="false">
            <!--<src refid="test-sources"/>-->
            <classpath>
                <path refid="libs"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <withKotlin/>
        </javac>
    </target>

    <target name="run-tests" depends="compile-tests">
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <path refid="libs"/>
                <pathelement location="${test.classes.dir}"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <batchtest fork="yes">
                <fileset dir="${test.classes.dir}">
                    <include name="de/unitrier/st/codesparks/core/**/*Test*.class"/>
                    <exclude name="de/unitrier/st/codesparks/core/**/*TestUtil*.class"/>
                    <exclude name="de/unitrier/st/codesparks/core/**/ThreadClusterSilhouetteTest$1.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

</project>